type User @model @auth(rules: [
  { allow: owner, ownerField: "owner", operations: [create, update, delete, read] }
]) {
  id: ID!
  name: String!
  bornedDate: AWSDate!
  groupId: String! @index(name: "byGroupId", queryField: "listUsersByGroupId", sortKeyFields: ["createdAt", "id"])
  createdAt: AWSDateTime! @index(name: "byCreatedAt", queryField: "listUsersByCreatedAt", sortKeyFields: ["name"])
}

type Group @model @auth(rules: [
  { allow: owner, ownerField: "owner", operations: [create, update, delete, read] }
]) {
  id: ID!
  name: String!
  createdAt: AWSDateTime! @index(name: "byCreatedAt", queryField: "listGroupsByCreatedAt", sortKeyFields: ["name"])
}

type Book @model @auth (rules: [
  { allow: owner, ownerField: "owner", operations: [create, update, delete, read] }
]) {
  id: ID!
  name: String!
  categoryId: String!
  groupId: String! @index(name: "byGroupId", queryField: "listBooksByGroupId", sortKeyFields: ["createdAt", "id"])
  createdAt: AWSDateTime! @index(name: "byCreatedAt", queryField: "listBooksByCreatedAt", sortKeyFields: ["name"])
}

type BookCategory @model @auth (rules: [
  { allow: owner, ownerField: "owner", operations: [create, update, delete, read] }
]) {
  id: ID!
  name: String!
  groupId: String! @index(name: "byGroupId", queryField: "listBookCategoriesByGroupId", sortKeyFields: ["createdAt", "id"])
  createdAt: AWSDateTime! @index(name: "byCreatedAt", queryField: "listBookCategoriesByCreatedAt", sortKeyFields: ["name"])
}

type Comment @model @auth (rules: [
  { allow: owner, ownerField: "owner", operations: [create, update, delete, read] }
]) {
  id: ID!
  contents: String!
  groupId: String! @index(name: "byGroupId", queryField: "listCommentsByGroupId", sortKeyFields: ["createdAt", "userId"])
  userId: String! @index(name: "byUserId", queryField: "listCommentsByUserId", sortKeyFields: ["createdAt", "groupId"])
  createdAt: AWSDateTime! @index(name: "byCreatedAt", queryField: "listCommentsByCreatedAt", sortKeyFields: ["name"])
}
