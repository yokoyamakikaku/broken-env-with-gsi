type User @model @auth(rules: [
  { allow: owner, ownerField: "owner", operations: [create, update, delete, read] }
]) {
  id: ID!
  name: String!
  bornedDate: AWSDate!
  groupId: String! @index(name: "byGroupId", queryField: "listUsersByGroupId", sortKeyFields: ["id"])
  createdAt: AWSDateTime! @index(name: "byCreatedAt", queryField: "listUsersByCreatedAt", sortKeyFields: ["id"])
}

type Group @model @auth(rules: [
  { allow: owner, ownerField: "owner", operations: [create, update, delete, read] }
]) {
  id: ID!
  name: String!
  createdAt: AWSDateTime! @index(name: "byCreatedAt", queryField: "listGroupsByCreatedAt", sortKeyFields: ["id"])
}

type Book @model @auth (rules: [
  { allow: owner, ownerField: "owner", operations: [create, update, delete, read] }
]) {
  id: ID!
  name: String!
  categoryId: String!
  groupId: String! @index(name: "byGroupId", queryField: "listBooksByGroupId", sortKeyFields: ["id"])
  createdAt: AWSDateTime! @index(name: "byCreatedAt", queryField: "listBooksByCreatedAt", sortKeyFields: ["id"])
}

type BookCategory @model @auth (rules: [
  { allow: owner, ownerField: "owner", operations: [create, update, delete, read] }
]) {
  id: ID!
  name: String!
  groupId: String! @index(name: "byGroupId", queryField: "listBookCategoriesByGroupId", sortKeyFields: ["id"])
  createdAt: AWSDateTime! @index(name: "byCreatedAt", queryField: "listBookCategoriesByCreatedAt", sortKeyFields: ["id"])
}

type Comment @model @auth (rules: [
  { allow: owner, ownerField: "owner", operations: [create, update, delete, read] }
]) {
  id: ID!
  contents: String!
  groupId: String! @index(name: "byGroupId", queryField: "listCommentsByGroupId", sortKeyFields: ["id"])
  userId: String! @index(name: "byUserId", queryField: "listCommentsByUserId", sortKeyFields: ["id"])
  createdAt: AWSDateTime! @index(name: "byCreatedAt", queryField: "listCommentsByCreatedAt", sortKeyFields: ["id"])
}

type Message @model @auth (rules: [
  { allow: owner, ownerField: "owner", operations: [create, update, delete, read] }
]) {
  id: ID!
  contents: String!
  groupId: String! @index(name: "byGroupId", queryField: "listMessagesByGroupId", sortKeyFields: ["id"])
  from: String! @index(name: "byFrom", queryField: "listMessagesByFrom", sortKeyFields: ["id"])
  to: String! @index(name: "byTo", queryField: "listMessagesByTo", sortKeyFields: ["id"])
  createdAt: AWSDateTime! @index(name: "byCreatedAt", queryField: "listMessagesByCreatedAt", sortKeyFields: ["id"])
}

type Schedule @model @auth (rules: [
  { allow: owner, ownerField: "owner", operations: [create, update, delete, read] }
]) {
  id: ID!
  comment: String!
  startedAt: AWSDateTime!
  finishedAt: AWSDateTime!
  groupId: String! @index(name: "byGroupId", queryField: "listSchedulesByGroupId", sortKeyFields: ["id"])
  createdAt: AWSDateTime! @index(name: "byCreatedAt", queryField: "listSchedulesByCreatedAt", sortKeyFields: ["id"])
}

type PostCategory @model @auth (rules: [
  { allow: owner, ownerField: "owner", operations: [create, update, delete, read] }
]) {
  id: ID!
  name: String!
  groupId: String! @index(name: "byGroupId", queryField: "listPostCategoriesByGroupId", sortKeyFields: ["id"])
  createdAt: AWSDateTime! @index(name: "byCreatedAt", queryField: "listPostCategoriesByCreatedAt", sortKeyFields: ["id"])
}

type Post @model @auth (rules: [
  { allow: owner, ownerField: "owner", operations: [create, update, delete, read] }
]) {
  id: ID!
  title: String!
  contents: String!
  categoryId: String! @index(name: "byCategoryId", queryField: "listPostsByGroupId", sortKeyFields: ["id"])
  groupId: String! @index(name: "byGroupId", queryField: "listPostsByGroupId", sortKeyFields: ["id"])
  createdAt: AWSDateTime! @index(name: "byCreatedAt", queryField: "listPostsByCreatedAt", sortKeyFields: ["id"])
}

type Todo @model @auth (rules: [
  { allow: owner, ownerField: "owner", operations: [create, update, delete, read] }
]) {
  id: ID!
  title: String!
  done: Boolean!
  groupId: String! @index(name: "byGroupId", queryField: "listTodosByGroupId", sortKeyFields: ["id"])
  createdAt: AWSDateTime! @index(name: "byCreatedAt", queryField: "listTodosByCreatedAt", sortKeyFields: ["id"])
}
